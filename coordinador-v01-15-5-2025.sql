-- MySQL Script generated by MySQL Workbench
-- Fri May 16 20:54:20 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema coordinadora
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `coordinadora` ;

-- -----------------------------------------------------
-- Schema coordinadora
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `coordinadora` ;
USE `coordinadora` ;

-- -----------------------------------------------------
-- Table `coordinadora`.`identification_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`identification_types` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`identification_types` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `createdAt` TIMESTAMP NOT NULL,
  `updatedAt` TIMESTAMP NULL,
  `deletedAt` TIMESTAMP NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `coordinadora`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`users` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `lastname` VARCHAR(255) NOT NULL,
  `id_number` VARCHAR(255) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `createdAt` TIMESTAMP NOT NULL,
  `updatedAt` TIMESTAMP NULL,
  `deletedAt` TIMESTAMP NULL,
  `identification_types_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_users_identification_types`
    FOREIGN KEY (`identification_types_id`)
    REFERENCES `coordinadora`.`identification_types` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'Tabla para autenticacion de usuarios';

CREATE UNIQUE INDEX `email_UNIQUE` ON `coordinadora`.`users` (`email` ASC) VISIBLE;

CREATE INDEX `fk_users_identification_types_idx` ON `coordinadora`.`users` (`identification_types_id` ASC) VISIBLE;

CREATE UNIQUE INDEX `id_number_UNIQUE` ON `coordinadora`.`users` (`id_number` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `coordinadora`.`permissions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`permissions` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`permissions` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `createdAt` TIMESTAMP NOT NULL,
  `updatedAt` TIMESTAMP NULL,
  `deletedAt` TIMESTAMP NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `coordinadora`.`roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`roles` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`roles` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `createdAt` TIMESTAMP NOT NULL,
  `updatedAt` TIMESTAMP NULL,
  `deletedAt` TIMESTAMP NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `coordinadora`.`roles_permissions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`roles_permissions` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`roles_permissions` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `permissions_id` INT NOT NULL,
  `roles_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_permission_users_permissions1`
    FOREIGN KEY (`permissions_id`)
    REFERENCES `coordinadora`.`permissions` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_roles_permissions_roles1`
    FOREIGN KEY (`roles_id`)
    REFERENCES `coordinadora`.`roles` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `fk_permission_users_permissions1_idx` ON `coordinadora`.`roles_permissions` (`permissions_id` ASC) VISIBLE;

CREATE INDEX `fk_roles_permissions_roles1_idx` ON `coordinadora`.`roles_permissions` (`roles_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `coordinadora`.`users_roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`users_roles` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`users_roles` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `roles_id` INT NOT NULL,
  `users_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_users_roles_roles1`
    FOREIGN KEY (`roles_id`)
    REFERENCES `coordinadora`.`roles` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_users_roles_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `coordinadora`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `fk_users_roles_roles1_idx` ON `coordinadora`.`users_roles` (`roles_id` ASC) VISIBLE;

CREATE INDEX `fk_users_roles_users1_idx` ON `coordinadora`.`users_roles` (`users_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `coordinadora`.`products_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`products_types` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`products_types` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NULL,
  `createdAt` TIMESTAMP NOT NULL,
  `updatedAt` TIMESTAMP NULL,
  `deletedAt` TIMESTAMP NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `coordinadora`.`packages`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`packages` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`packages` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `weight` DOUBLE NOT NULL,
  `large` DECIMAL NOT NULL,
  `height` DECIMAL NOT NULL,
  `depth` DECIMAL NOT NULL,
  `createdAt` TIMESTAMP NOT NULL,
  `updatedAt` TIMESTAMP NULL,
  `deletedAt` TIMESTAMP NULL,
  `products_types_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_packages_products_types1`
    FOREIGN KEY (`products_types_id`)
    REFERENCES `coordinadora`.`products_types` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `fk_packages_products_types1_idx` ON `coordinadora`.`packages` (`products_types_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `coordinadora`.`status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`status` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`status` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `createdAt` TIMESTAMP NOT NULL,
  `updatedAt` TIMESTAMP NULL,
  `deletedAt` TIMESTAMP NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `coordinadora`.`order_send`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`order_send` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`order_send` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NULL,
  `createdAt` TIMESTAMP NOT NULL,
  `updatedAt` TIMESTAMP NULL,
  `deletedAt` TIMESTAMP NULL,
  `status_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_order_send_status1`
    FOREIGN KEY (`status_id`)
    REFERENCES `coordinadora`.`status` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `fk_order_send_status1_idx` ON `coordinadora`.`order_send` (`status_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `coordinadora`.`order_sends_package`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`order_sends_package` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`order_sends_package` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `order_send_id` INT NOT NULL,
  `packages_id` INT NOT NULL,
  `users_id` INT NOT NULL,
  `carrier_id` INT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_order_sends_package_order_send1`
    FOREIGN KEY (`order_send_id`)
    REFERENCES `coordinadora`.`order_send` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_sends_package_packages1`
    FOREIGN KEY (`packages_id`)
    REFERENCES `coordinadora`.`packages` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_sends_package_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `coordinadora`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_sends_package_users2`
    FOREIGN KEY (`carrier_id`)
    REFERENCES `coordinadora`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `fk_order_sends_package_order_send1_idx` ON `coordinadora`.`order_sends_package` (`order_send_id` ASC) VISIBLE;

CREATE INDEX `fk_order_sends_package_packages1_idx` ON `coordinadora`.`order_sends_package` (`packages_id` ASC) VISIBLE;

CREATE INDEX `fk_order_sends_package_users1_idx` ON `coordinadora`.`order_sends_package` (`users_id` ASC) VISIBLE;

CREATE INDEX `fk_order_sends_package_users2_idx` ON `coordinadora`.`order_sends_package` (`carrier_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `coordinadora`.`addresses`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`addresses` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`addresses` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `address` VARCHAR(255) NOT NULL,
  `createdAt` TIMESTAMP NULL,
  `updatedAt` TIMESTAMP NULL,
  `deletedAt` TIMESTAMP NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `coordinadora`.`addresses_users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`addresses_users` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`addresses_users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `users_id` INT NOT NULL,
  `addresses_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_addresses_users_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `coordinadora`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_addresses_users_addresses1`
    FOREIGN KEY (`addresses_id`)
    REFERENCES `coordinadora`.`addresses` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `fk_addresses_users_users1_idx` ON `coordinadora`.`addresses_users` (`users_id` ASC) VISIBLE;

CREATE INDEX `fk_addresses_users_addresses1_idx` ON `coordinadora`.`addresses_users` (`addresses_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `coordinadora`.`cars_types`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`cars_types` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`cars_types` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `createdAt` TIMESTAMP NOT NULL,
  `updatedAt` TIMESTAMP NULL,
  `deletedAt` TIMESTAMP NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `coordinadora`.`cars`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`cars` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`cars` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `doors` INT NOT NULL,
  `numbers_of_wheels` INT NOT NULL,
  `weight_to_load` DOUBLE NOT NULL,
  `requires_crane` TINYINT NULL,
  `cylinder_capacity` BIGINT NULL,
  `cars_types_id` INT NOT NULL,
  `status_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_cars_cars_types1`
    FOREIGN KEY (`cars_types_id`)
    REFERENCES `coordinadora`.`cars_types` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cars_status1`
    FOREIGN KEY (`status_id`)
    REFERENCES `coordinadora`.`status` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `fk_cars_cars_types1_idx` ON `coordinadora`.`cars` (`cars_types_id` ASC) VISIBLE;

CREATE INDEX `fk_cars_status1_idx` ON `coordinadora`.`cars` (`status_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `coordinadora`.`cars_users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`cars_users` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`cars_users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `users_id` INT NOT NULL,
  `cars_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_cars_users_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `coordinadora`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_cars_users_cars1`
    FOREIGN KEY (`cars_id`)
    REFERENCES `coordinadora`.`cars` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `fk_cars_users_users1_idx` ON `coordinadora`.`cars_users` (`users_id` ASC) VISIBLE;

CREATE INDEX `fk_cars_users_cars1_idx` ON `coordinadora`.`cars_users` (`cars_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `coordinadora`.`direction_orders`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coordinadora`.`direction_orders` ;

CREATE TABLE IF NOT EXISTS `coordinadora`.`direction_orders` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `addresses_id` INT NOT NULL,
  `order_send_id` INT NOT NULL,
  `priority` BIGINT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `fk_direction_orders_addresses1`
    FOREIGN KEY (`addresses_id`)
    REFERENCES `coordinadora`.`addresses` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_direction_orders_order_send1`
    FOREIGN KEY (`order_send_id`)
    REFERENCES `coordinadora`.`order_send` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

CREATE INDEX `fk_direction_orders_addresses1_idx` ON `coordinadora`.`direction_orders` (`addresses_id` ASC) VISIBLE;

CREATE INDEX `fk_direction_orders_order_send1_idx` ON `coordinadora`.`direction_orders` (`order_send_id` ASC) VISIBLE;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
USE `coordinadora`;

DELIMITER $$

USE `coordinadora`$$
DROP TRIGGER IF EXISTS `coordinadora`.`roles_permissions_BEFORE_INSERT` $$
USE `coordinadora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `coordinadora`.`roles_permissions_BEFORE_INSERT` BEFORE INSERT ON `roles_permissions` FOR EACH ROW
BEGIN
	DECLARE existing_count INT;

SELECT 
    COUNT(*)
INTO existing_count FROM
    roles_permissions
WHERE
    roles_id = NEW.roles_id
        AND permissions_id = NEW.permissions_id;

  IF existing_count > 0 THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Duplicate roles_id and permissions_id entry is not allowed';
  END IF;
END$$


USE `coordinadora`$$
DROP TRIGGER IF EXISTS `coordinadora`.`roles_permissions_BEFORE_UPDATE` $$
USE `coordinadora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `coordinadora`.`roles_permissions_BEFORE_UPDATE` BEFORE UPDATE ON `roles_permissions` FOR EACH ROW
BEGIN
	DECLARE existing_count INT;

SELECT 
    COUNT(*)
INTO existing_count FROM
    roles_permissions
WHERE
    roles_id = NEW.roles_id
        AND permissions_id = NEW.permissions_id;

  IF existing_count > 0 THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Duplicate roles_id and permissions_id entry is not allowed';
  END IF;
END$$


USE `coordinadora`$$
DROP TRIGGER IF EXISTS `coordinadora`.`users_roles_BEFORE_INSERT` $$
USE `coordinadora`$$
CREATE 
    DEFINER = CURRENT_USER 
    TRIGGER  `coordinadora` . `users_roles_BEFORE_INSERT`
 BEFORE INSERT ON `users_roles` FOR EACH ROW
    BEGIN
		DECLARE duplicate_count INT;

SELECT 
    COUNT(*)
INTO duplicate_count FROM
    users_roles
WHERE
    users_id = NEW.users_id
        AND roles_id = NEW.roles_id;

    IF duplicate_count > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'This user already has this role assigned.';
    END IF;
    END$$


USE `coordinadora`$$
DROP TRIGGER IF EXISTS `coordinadora`.`users_roles_BEFORE_UPDATE` $$
USE `coordinadora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `coordinadora`.`users_roles_BEFORE_UPDATE` BEFORE UPDATE ON `users_roles` FOR EACH ROW
BEGIN
	DECLARE duplicate_count INT;

SELECT 
    COUNT(*)
INTO duplicate_count FROM
    users_roles
WHERE
    users_id = NEW.users_id
        AND roles_id = NEW.roles_id;

    IF duplicate_count > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'This user already has this role assigned.';
    END IF;
END$$


USE `coordinadora`$$
DROP TRIGGER IF EXISTS `coordinadora`.`cars_users_BEFORE_INSERT` $$
USE `coordinadora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `coordinadora`.`cars_users_BEFORE_INSERT` BEFORE INSERT ON `cars_users` FOR EACH ROW
BEGIN
	DECLARE existing_count INT;

SELECT 
    COUNT(*)
INTO existing_count FROM
    cars_users
WHERE
    users_id = NEW.users_id
        AND cars_id = NEW.cars_id;

  IF existing_count > 0 THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Duplicate users_id and cars_id entry is not allowed';
  END IF;
END$$


USE `coordinadora`$$
DROP TRIGGER IF EXISTS `coordinadora`.`cars_users_BEFORE_UPDATE` $$
USE `coordinadora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `coordinadora`.`cars_users_BEFORE_UPDATE` BEFORE UPDATE ON `cars_users` FOR EACH ROW
BEGIN
	DECLARE existing_count INT;

SELECT 
    COUNT(*)
INTO existing_count FROM
    cars_users
WHERE
    users_id = NEW.users_id
        AND cars_id = NEW.cars_id;

  IF existing_count > 0 THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Duplicate users_id and cars_id entry is not allowed';
  END IF;
END$$


USE `coordinadora`$$
DROP TRIGGER IF EXISTS `coordinadora`.`direction_orders_BEFORE_INSERT` $$
USE `coordinadora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `coordinadora`.`direction_orders_BEFORE_INSERT` BEFORE INSERT ON `direction_orders` FOR EACH ROW
BEGIN
	DECLARE existing_count INT;

SELECT 
    COUNT(*)
INTO existing_count FROM
    direction_orders
WHERE
    addresses_id = NEW.addresses_id
        AND order_send_id = NEW.order_send_id;

  IF existing_count > 0 THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Duplicate addresses_id and order_send_id entry is not allowed';
  END IF;
END$$


USE `coordinadora`$$
DROP TRIGGER IF EXISTS `coordinadora`.`direction_orders_BEFORE_UPDATE` $$
USE `coordinadora`$$
CREATE DEFINER = CURRENT_USER TRIGGER `coordinadora`.`direction_orders_BEFORE_UPDATE` BEFORE UPDATE ON `direction_orders` FOR EACH ROW
BEGIN
	DECLARE existing_count INT;

SELECT 
    COUNT(*)
INTO existing_count FROM
    direction_orders
WHERE
    addresses_id = NEW.addresses_id
        AND order_send_id = NEW.order_send_id;

  IF existing_count > 0 THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Duplicate addresses_id and order_send_id entry is not allowed';
  END IF;
END$$

DELIMITER ;

INSERT INTO `identification_types` (`id`,`name`, `createdAt`)
VALUES (1, 'Cedula', '2025-05-16 10:30:00');

INSERT INTO `identification_types` (`id`,`name`, `createdAt`)
VALUES (2, 'Tarjeta de extranjería', '2025-05-16 10:30:00');

INSERT INTO `identification_types` (`id`,`name`, `createdAt`)
VALUES (3, 'Pasaporte', '2025-05-16 10:30:00');

INSERT INTO `users` (`id`,`name`, `lastname`, `id_number`, `email`, `password`, `createdAt`, `updatedAt`, `deletedAt`, `identification_types_id`)
VALUES (1, 'Fabio', 'Pino', '72357259', 'fabpin04@hotmail.com', '$2b$10$uK46S87DXNQj.1CzFMHQ9ugLGkQAY/.zeaidC.bpu6QQN0ySpm3lO', '2025-05-16 10:30:00', NULL, NULL, 1);

INSERT INTO `users` (`id`,`name`, `lastname`, `id_number`, `email`, `password`, `createdAt`, `updatedAt`, `deletedAt`, `identification_types_id`)
VALUES (NULL, 'Fabio', 'Pino', '72357260', 'fabpin05@hotmail.com', '$2b$10$uK46S87DXNQj.1CzFMHQ9ugLGkQAY/.zeaidC.bpu6QQN0ySpm3lO', '2025-05-16 10:30:00', NULL, NULL, 1);

INSERT INTO `status` (`id`, `name`, `createdAt`, `updatedAt`, `deletedAt`)
VALUES (1, 'En Espera', '2025-05-16 10:30:00', NULL, NULL);

INSERT INTO `status` (`id`, `name`, `createdAt`, `updatedAt`, `deletedAt`)
VALUES (2, 'En tránsito', '2025-05-16 10:30:00', NULL, NULL);

INSERT INTO `status` (`id`, `name`, `createdAt`, `updatedAt`, `deletedAt`)
VALUES (3, 'Entregado', '2025-05-16 10:30:00', NULL, NULL);

INSERT INTO `roles` (`id`, `name`, `createdAt`, `updatedAt`, `deletedAt`)
VALUES (1, 'Administrador', '2025-05-16 10:30:00', NULL, NULL);

INSERT INTO `roles` (`id`, `name`, `createdAt`, `updatedAt`, `deletedAt`)
VALUES (2, 'Cliente', '2025-05-16 10:30:00', NULL, NULL);

INSERT INTO `roles` (`id`, `name`, `createdAt`, `updatedAt`, `deletedAt`)
VALUES (3, 'Transportista', '2025-05-16 10:30:00', NULL, NULL);

INSERT INTO `permissions` (`id`, `name`, `createdAt`, `updatedAt`, `deletedAt`)
VALUES (1, 'Crear', '2025-05-16 10:30:00', NULL, NULL);

INSERT INTO `permissions` (`id`, `name`, `createdAt`, `updatedAt`, `deletedAt`)
VALUES (2, 'Actualizar', '2025-05-16 10:30:00', NULL, NULL);

INSERT INTO `permissions` (`id`, `name`, `createdAt`, `updatedAt`, `deletedAt`)
VALUES (3, 'Eliminar', '2025-05-16 10:30:00', NULL, NULL);

INSERT INTO `permissions` (`id`, `name`, `createdAt`, `updatedAt`, `deletedAt`)
VALUES (4, 'Leer', '2025-05-16 10:30:00', NULL, NULL);

INSERT INTO `roles_permissions` (`id`, `permissions_id`, `roles_id`)
VALUES (1, 1, 1);

INSERT INTO `roles_permissions` (`id`, `permissions_id`, `roles_id`)
VALUES (2, 2, 1);

INSERT INTO `roles_permissions` (`id`, `permissions_id`, `roles_id`)
VALUES (3, 3, 1);

INSERT INTO `roles_permissions` (`id`, `permissions_id`, `roles_id`)
VALUES (4, 4, 1);